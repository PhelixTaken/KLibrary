package me.phelix.klibrary.extensions

import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStream
import java.io.OutputStream
import java.nio.channels.SeekableByteChannel
import java.nio.charset.Charset
import java.nio.file.*
import java.nio.file.attribute.*
import java.util.function.BiPredicate
import java.util.stream.Stream

fun Path.createDirectories(): Path = Files.createDirectories(this)
fun Path.newOutputStream(): OutputStream = Files.newOutputStream(this)
fun Path.newInputStream(): InputStream = Files.newInputStream(this)
fun Path.newByteChannel(options: MutableSet<OpenOption>, attrs: FileAttribute<*>): SeekableByteChannel = Files.newByteChannel(this, options, attrs)
fun Path.newByteChannel(vararg options: OpenOption): SeekableByteChannel = Files.newByteChannel(this, *options)
fun Path.newDirectoryStream(): DirectoryStream<Path> = Files.newDirectoryStream(this)
fun Path.newDirectoryStream(glob: String): DirectoryStream<Path> = Files.newDirectoryStream(this, glob)
fun Path.newDirectoryStream(filter: DirectoryStream.Filter<in Path?>): DirectoryStream<Path> = Files.newDirectoryStream(this, filter)
fun Path.createFile(attrs: FileAttribute<*>): Path = Files.createFile(this, attrs)
fun Path.createDirectory(attrs: FileAttribute<*>): Path = Files.createDirectory(this, attrs)
fun Path.createDirectories(attrs: FileAttribute<*>): Path = Files.createDirectories(this, attrs)
fun Path.createTempFile(prefix: String, suffix: String, attrs: FileAttribute<*>): Path = Files.createTempFile(this, prefix, suffix, attrs)
fun Path.createTempDirectory(prefix: String, attrs: FileAttribute<*>): Path = Files.createTempDirectory(this, prefix, attrs)
fun Path.createSymbolicLink(target: Path, attrs: FileAttribute<*>): Path = Files.createSymbolicLink(this, target, attrs)
fun Path.createLink(existing: Path): Path = Files.createLink(this, existing)
fun Path.delete() = Files.delete(this)
fun Path.deleteIfExists(): Boolean = Files.deleteIfExists(this)
fun Path.copy(target: Path, vararg options: CopyOption): Path = Files.copy(this, target, *options)
fun Path.move(target: Path, vararg options: CopyOption): Path = Files.move(this, target, *options)
fun Path.readSymbolicLink(): Path = Files.readSymbolicLink(this)
fun Path.getFileStore(): FileStore = Files.getFileStore(this)
fun Path.isSameFile(path2: Path): Boolean = Files.isSameFile(this, path2)
fun Path.isHidden(): Boolean = Files.isHidden(this)
fun Path.probeContentType(): String = Files.probeContentType(this)
fun <V : FileAttributeView> Path.getFileAttributeView(type: Class<V>, vararg options: LinkOption): V = Files.getFileAttributeView(this, type, *options)
fun <A : BasicFileAttributes> Path.readAttributes(type: Class<A>, vararg options: LinkOption): A = Files.readAttributes(this, type, *options)
fun Path.setAttribute(attribute: String, value: Any, vararg options: LinkOption): Path = Files.setAttribute(this, attribute, value, *options)
fun Path.getAttribute(attribute: String, vararg options: LinkOption): Any = Files.getAttribute(this, attribute, *options)
fun Path.readAttributes(attribute: String, vararg options: LinkOption): MutableMap<String, Any> = Files.readAttributes(this, attribute, *options)
fun Path.getPosixFilePermissions(vararg options: LinkOption): MutableSet<PosixFilePermission> = Files.getPosixFilePermissions(this, *options)
fun Path.setPosixFilePermissions(perms: MutableSet<PosixFilePermission>): Path = Files.setPosixFilePermissions(this, perms)
fun Path.getOwner(vararg options: LinkOption): UserPrincipal = Files.getOwner(this, *options)
fun Path.setOwner(owner: UserPrincipal): Path = Files.setOwner(this, owner)
fun Path.isSymbolicLink(): Boolean = Files.isSymbolicLink(this)
fun Path.isDirectory(vararg options: LinkOption): Boolean = Files.isDirectory(this, *options)
fun Path.isRegularFile(vararg options: LinkOption): Boolean = Files.isRegularFile(this, *options)
fun Path.getLastModifiedTime(vararg options: LinkOption): FileTime = Files.getLastModifiedTime(this, *options)
fun Path.setLastModifiedTime(time: FileTime): Path = Files.setLastModifiedTime(this, time)
fun Path.size(): Long = Files.size(this)
fun Path.exists(): Boolean = Files.exists(this)
fun Path.exists(vararg options: LinkOption): Boolean = Files.exists(this, *options)
fun Path.notExists(vararg options: LinkOption): Boolean = Files.notExists(this, *options)
fun Path.isReadable(): Boolean = Files.isReadable(this)
fun Path.isWritable(): Boolean = Files.isWritable(this)
fun Path.isExecutable(): Boolean = Files.isExecutable(this)
fun Path.walkFileTree(options: MutableSet<FileVisitOption>, maxDepth: Int, visitor: FileVisitor<in Path>): Path = Files.walkFileTree(this, options, maxDepth, visitor)
fun Path.walkFileTree(visitor: FileVisitor<in Path>): Path = Files.walkFileTree(this, visitor)
fun Path.newBufferedReader(cs: Charset): BufferedReader = Files.newBufferedReader(this, cs)
fun Path.newBufferedReader(): BufferedReader = Files.newBufferedReader(this)
fun Path.newBufferedWriter(cs: Charset, vararg options: OpenOption): BufferedWriter = Files.newBufferedWriter(this, cs, *options)
fun Path.newBufferedWriter(vararg options: OpenOption): BufferedWriter = Files.newBufferedWriter(this, *options)
fun Path.copy(ins: InputStream, vararg options: CopyOption): Long = Files.copy(ins, this, *options)
fun Path.copy(out: OutputStream): Long = Files.copy(this, out)
fun Path.readAllBytes(): ByteArray = Files.readAllBytes(this)
fun Path.readString(): String = Files.readString(this)
fun Path.readString(cs: Charset): String = Files.readString(this, cs)
fun Path.readAllLines(cs: Charset): List<String> = Files.readAllLines(this, cs)
fun Path.readAllLines(): List<String> = Files.readAllLines(this)
fun Path.write(bytes: ByteArray, vararg options: OpenOption): Path = Files.write(this, bytes, *options)
fun Path.write(lines: Iterable<CharSequence>, cs: Charset, vararg options: OpenOption): Path = Files.write(this, lines, cs, *options)
fun Path.write(lines: Iterable<CharSequence>, vararg options: OpenOption): Path = Files.write(this, lines, *options)
fun Path.writeString(csq: CharSequence, vararg options: OpenOption): Path = Files.writeString(this, csq, *options)
fun Path.writeString(csq: CharSequence, cs: Charset, vararg options: OpenOption): Path = Files.writeString(this, csq, cs, *options)
fun Path.list(): Stream<Path> = Files.list(this)
fun Path.walk(maxDepth: Int, vararg options: FileVisitOption): Stream<Path> = Files.walk(this, maxDepth, *options)
fun Path.walk(vararg options: FileVisitOption): Stream<Path> = Files.walk(this, *options)
fun Path.find(maxDepth: Int, matcher: BiPredicate<Path, BasicFileAttributes>, vararg options: FileVisitOption): Stream<Path> = Files.find(this, maxDepth, matcher, *options)
fun Path.lines(cs: Charset): Stream<String> = Files.lines(this, cs)
fun Path.lines(): Stream<String> = Files.lines(this)
